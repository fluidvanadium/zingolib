use super::super::LightWallet;

/// ExampleWalletNetworkCase sorts first by Network, then seed, then last saved version.
/// It is public so that any consumer can select and load any example wallet.
#[non_exhaustive]
#[derive(Clone)]
pub enum ExampleWalletNetwork {
    /// /
    Regtest(ExampleRegtestWalletSeed),
    /// /
    Testnet(ExampleTestnetWalletSeed),
    /// /
    Mainnet(ExampleMainnetWalletSeed),
}

/// /
#[non_exhaustive]
#[derive(Clone)]
pub enum ExampleMainnetWalletSeed {
    /// this is a mainnet wallet originally called missing_data_test
    VTFCORFBCBPCTCFUPMEGMWBP(ExampleVTFCORFBCBPCTCFUPMEGMWBPWalletVersion),
}
/// /
#[non_exhaustive]
#[derive(Clone)]
pub enum ExampleVTFCORFBCBPCTCFUPMEGMWBPWalletVersion {
    /// wallet was last saved in this serialization version
    V28,
}
/// /
#[non_exhaustive]
#[derive(Clone)]
pub enum ExampleTestnetWalletSeed {
    /// This is a testnet seed, generated by fluidvanadium at the beginning of owls (this example wallet enumeration)
    MSKMGDBHOTBPETCJWCSPGOPP(ExampleMSKMGDBHOTBPETCJWCSPGOPPWalletVersion),
    /// this testnet wallet was generated at the beginning of serialization v28 by fluidvanadium
    CBBHRWIILGBRABABSSHSMTPR(ExampleCBBHRWIILGBRABABSSHSMTPRWalletVersion),
}
/// /
#[non_exhaustive]
#[derive(Clone)]
pub enum ExampleMSKMGDBHOTBPETCJWCSPGOPPWalletVersion {
    /// wallet was last saved by the code in this commit
    Gab72a38b,
    /// this wallet was synced in this version. does it have a bunch of taz scattered around different addresses?
    G93738061a,
}
/// A testnet wallet initiated with
/// --seed "chimney better bulb horror rebuild whisper improve intact letter giraffe brave rib appear bulk aim burst snap salt hill sad merge tennis phrase raise"
/// with 3 addresses containing all receivers.
/// including orchard and sapling transactions
#[non_exhaustive]
#[derive(Clone)]
pub enum ExampleCBBHRWIILGBRABABSSHSMTPRWalletVersion {
    /// wallet was last saved in this serialization version
    V26,
    /// wallet was last saved in this serialization version
    V27,
    /// wallet was last saved in this serialization version
    V28,
}
/// /
#[non_exhaustive]
#[derive(Clone)]
pub enum ExampleRegtestWalletSeed {
    /// this is a regtest wallet originally called old_wallet_reorg_test_wallet
    HMVASMUVWMSSVICHCARBPOCT(ExampleHMVASMUVWMSSVICHCARBPOCTWalletVersion),
    /// this is a regtest wallet originally called v26/sap_only
    AAAAAAAAAAAAAAAAAAAAAAAA(ExampleAAAAAAAAAAAAAAAAAAAAAAAAWalletVersion),
}
/// /
#[non_exhaustive]
#[derive(Clone)]
pub enum ExampleHMVASMUVWMSSVICHCARBPOCTWalletVersion {
    /// wallet was last saved in this serialization version
    V27,
}
/// /
#[non_exhaustive]
#[derive(Clone)]
pub enum ExampleAAAAAAAAAAAAAAAAAAAAAAAAWalletVersion {
    /// wallet was last saved in this serialization version
    V26,
}

impl LightWallet {
    /// loads test wallets
    /// this function can be improved by a macro. even better would be to derive directly from the enum.
    // this file is fuc
    /// loads any one of the test wallets included in the examples
    pub async fn load_example_wallet(case: ExampleWalletNetwork) -> Self {
        match case {
            ExampleWalletNetwork::Regtest(ExampleRegtestWalletSeed::HMVASMUVWMSSVICHCARBPOCT(
                ExampleHMVASMUVWMSSVICHCARBPOCTWalletVersion::V27,
            )) => {
                LightWallet::unsafe_from_buffer_regtest(include_bytes!(
                    "examples/regtest/hmvasmuvwmssvichcarbpoct/v27/zingo-wallet.dat"
                ))
                .await
            }
            ExampleWalletNetwork::Regtest(ExampleRegtestWalletSeed::AAAAAAAAAAAAAAAAAAAAAAAA(
                ExampleAAAAAAAAAAAAAAAAAAAAAAAAWalletVersion::V26,
            )) => {
                LightWallet::unsafe_from_buffer_regtest(include_bytes!(
                    "examples/regtest/aaaaaaaaaaaaaaaaaaaaaaaa/v26/zingo-wallet.dat"
                ))
                .await
            }
            ExampleWalletNetwork::Testnet(ExampleTestnetWalletSeed::MSKMGDBHOTBPETCJWCSPGOPP(
                ExampleMSKMGDBHOTBPETCJWCSPGOPPWalletVersion::Gab72a38b,
            )) => {
                LightWallet::unsafe_from_buffer_testnet(include_bytes!(
                    "examples/testnet/mskmgdbhotbpetcjwcspgopp/Gab72a38b/zingo-wallet.dat"
                ))
                .await
            }
            ExampleWalletNetwork::Testnet(ExampleTestnetWalletSeed::MSKMGDBHOTBPETCJWCSPGOPP(
                ExampleMSKMGDBHOTBPETCJWCSPGOPPWalletVersion::G93738061a,
            )) => {
                LightWallet::unsafe_from_buffer_testnet(include_bytes!(
                    "examples/testnet/mskmgdbhotbpetcjwcspgopp/G93738061a/zingo-wallet.dat"
                ))
                .await
            }
            ExampleWalletNetwork::Testnet(ExampleTestnetWalletSeed::CBBHRWIILGBRABABSSHSMTPR(
                ExampleCBBHRWIILGBRABABSSHSMTPRWalletVersion::V26,
            )) => {
                LightWallet::unsafe_from_buffer_testnet(include_bytes!(
                    "examples/testnet/cbbhrwiilgbrababsshsmtpr/v26/zingo-wallet.dat"
                ))
                .await
            }
            ExampleWalletNetwork::Testnet(ExampleTestnetWalletSeed::CBBHRWIILGBRABABSSHSMTPR(
                ExampleCBBHRWIILGBRABABSSHSMTPRWalletVersion::V27,
            )) => {
                LightWallet::unsafe_from_buffer_testnet(include_bytes!(
                    "examples/testnet/cbbhrwiilgbrababsshsmtpr/v27/zingo-wallet.dat"
                ))
                .await
            }
            ExampleWalletNetwork::Testnet(ExampleTestnetWalletSeed::CBBHRWIILGBRABABSSHSMTPR(
                ExampleCBBHRWIILGBRABABSSHSMTPRWalletVersion::V28,
            )) => {
                LightWallet::unsafe_from_buffer_testnet(include_bytes!(
                    "examples/testnet/cbbhrwiilgbrababsshsmtpr/v28/zingo-wallet.dat"
                ))
                .await
            }
            ExampleWalletNetwork::Mainnet(ExampleMainnetWalletSeed::VTFCORFBCBPCTCFUPMEGMWBP(
                ExampleVTFCORFBCBPCTCFUPMEGMWBPWalletVersion::V28,
            )) => {
                LightWallet::unsafe_from_buffer_mainnet(include_bytes!(
                    "examples/mainnet/vtfcorfbcbpctcfupmegmwbp/v28/zingo-wallet.dat"
                ))
                .await
            }
        }
    }
}

// /// loads test wallets
// impl LightWallet {
//     /// each wallet file has a saved balance
//     pub fn example_expected_balance(case: LegacyWalletCase) -> u64 {
//         match case {
//             // LegacyWalletCase::ZingoV26(LegacyWalletCaseZingoV26::One) => 0,
//             // LegacyWalletCase::ZingoV26(LegacyWalletCaseZingoV26::Two) => 10177826,
//             LegacyWalletCase::ZingoV26(LegacyWalletCaseZingoV26::RegtestSapOnly) => todo!(),
//             LegacyWalletCase::ZingoV28 => 10342837,
//         }
//     }

//     /// each wallet file has a saved balance
//     pub fn example_expected_num_addresses(case: LegacyWalletCase) -> usize {
//         match case {
//             // LegacyWalletCase::ZingoV26(LegacyWalletCaseZingoV26::One) => 3,
//             // LegacyWalletCase::ZingoV26(LegacyWalletCaseZingoV26::Two) => 1,
//             LegacyWalletCase::ZingoV26(LegacyWalletCaseZingoV26::RegtestSapOnly) => todo!(),
//             LegacyWalletCase::ZingoV28 => 3,
//         }
//     }
// }
